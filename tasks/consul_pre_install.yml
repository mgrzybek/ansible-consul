---

- name: Pre-Install | Test HTTP Proxy
  when:
  - consul_http_proxy is defined
  - consul_http_proxy != None
  - consul_http_proxy | length > 0
  block:
  - name: Pre-Install | Test proxy {{ consul_http_proxy }} (http)
    uri: url={{ consul_http_proxy }} method=GET status_code=400,403

  - name: Pre-Install | Test proxy {{ consul_http_proxy }} (https)
    when: consul_http_proxy != consul_https_proxy
    uri: url={{ consul_https_proxy }} method=GET status_code=400,403

- name: Pre-Install | Check Openstack credentials
  when:
  - consul_acl_token_store_swift | lower == 'true'
  - consul_enable_acl | lower == 'true'
  assert:
    fail_msg: Openstack credencials must be present
    that:
    - lookup('env', 'OS_USERNAME') is defined
    - lookup('env', 'OS_PASSWORD') is defined
    - lookup('env', 'OS_AUTH_URL') is defined
    - lookup('env', 'OS_PROJECT_ID') is defined
    - lookup('env', 'OS_USER_DOMAIN_NAME') is undefined

- name: Pre-Install | Check consul_datacenter
  assert:
    fail_msg: consul_datacenter must be configured
    that:
    - consul_datacenter is defined
    - consul_datacenter | length > 2

- name: Pre-Install | Check consul_consul_bootstrap_expect
  when: consul_server_mode | lower == 'true'
  assert:
    fail_msg: consul_consul_bootstrap_expect must be given
    that:
    - consul_consul_bootstrap_expect is defined
    - consul_consul_bootstrap_expect | int > 0

- name: Pre-Install | Set local facts
  set_fact:
    install_consul: false
    configure_telegraf: false
    write_consul_env_file: false
    consul_acl_token_store_swift: false
    acl_secret_id: ''

- name: Pre-Install | Check consul.hcl file
  register: consul_stat
  stat: path={{ consul_conf_file }}

- name: Pre-Install | ACL info
  run_once: true
  block:
  # TODO: use HCL file instead
  # TODO: check that this is not deprecated
  - name: Pre-Install | Get existing consul uuid in config file (acl stuff)
    changed_when: false
    when:
    - consul_stat.stat.exists == true
    register: consul_hcl
    shell: >
      awk -F= '/acl_master_token/ {gsub("\"","");gsub(" ","");print $NF}' {{ consul_conf_file }}

  - name: Pre-Install | Set local fact (consul_uuid)
    when:
    - consul_stat.stat.exists == true
    - consul_hcl.stdout_lines | length > 0
    set_fact:
      consul_uuid: '{{ consul_hcl.stdout }}'

  - name: Pre-Install | Set local fact (consul_uuid)
    when:
    - consul_stat.stat.exists == true
    - consul_hcl.stdout_lines | length == 0
    set_fact:
      consul_uuid: "{{ 999999999999999999999 | random | string + (lookup('pipe', 'date +%s%N')) | to_uuid() }}"

- name: Pre-Install | Encrypt info
  run_once: true
  block:
    # TODO: use HCL file instead
  - name: Pre-Install | Get existing consul encrypt in config file (acl stuff)
    when:
    - consul_stat.stat.exists == true
    register: consul_hcl
    changed_when: false
    shell: >
      awk -F= '/encrypt/ {gsub("\"","");gsub(" ","");print $NF}' {{ consul_conf_file }}

  - name: Pre-Install | Set local fact (consul_encrypt)
    when:
    - consul_stat.stat.exists == true
    - consul_hcl.stdout_lines | length > 0
    set_fact:
      consul_encrypt: '{{ consul_hcl.stdout }}'

- name: Pre-Install | Set local fact (consul_encrypt)
  when:
  - consul_consul_encrypt != None
  set_fact:
    consul_encrypt: '{{ consul_consul_encrypt }}'

- name: Pre-Install | Check telegraf
  when: ansible_distribution | lower == "linux"
  register: telegraf_service
  changed_when: false
  failed_when: false
  shell: systemctl is-active telegraf

- name: Pre-Install | Check telegraf
  when: ansible_distribution | lower != "linux"
  register: telegraf_service
  changed_when: false
  failed_when: false
  command: service telegraf onestatus

- name: Pre-Install | Set local fact (configure_telegraf to true)
  when:
  - telegraf_service is success
  - consul_config_telegraf | lower == 'true'
  set_fact:
    configure_telegraf: true

- name: Pre-Install | Set ACLs facts
  when:
  - consul_enable_acl | lower == 'true'
  block:
  - name: Pre-Install | Set local fact (create an env file containing the token)
    when:
    - consul_acl_token_store_env_file | lower == 'true'
    set_fact: write_consul_env_file=true

  - name: Pre-Install | Set local fact (create a swift object containing the token)
    when:
    - consul_acl_token_store_swift | lower == 'true'
    - lookup('env', 'OS_USERNAME') is defined
    - lookup('env', 'OS_PASSWORD') is defined
    - lookup('env', 'OS_AUTH_URL') is defined
    - lookup('env', 'OS_PROJECT_ID') is defined
    - lookup('env', 'OS_USER_DOMAIN_NAME') is defined
    set_fact: consul_acl_token_store_swift=true

- name: Pre-Install | Declare APT repo
  when: ansible_pkg_mgr | lower == 'apt'
  block:
  - name: Pre-Install | Add key (with proxy)
    when:
    - consul_http_proxy != None
    environment:
      http_proxy: '{{ consul_http_proxy }}'
      https_proxy: '{{ consul_https_proxy }}'
      no_proxy: '{{ consul_http_no_proxy }}'
    apt_key:
      url: '{{ consul_apt_key }}'
      state: present

  - name: Pre-Install | Add key (without proxy)
    when:
    - consul_http_proxy == None
    apt_key:
      url: '{{ consul_apt_key }}'
      state: present

  - name: Pre-Install | Add repo
    apt_repository:
      repo: '{{ consul_apt_repo }}'
      state: present

- name: Pre-Install | Declare RPM repo
  when: ansible_pkg_mgr | lower | regex_search('(dnf)|(rpm)|(yum)')
  block:
  - name: Pre-Install | Add repo
    yum_repository:
      name: hashicorp
      description: Official Hashicorp RPM repository
      baseurl: '{{ consul_rpm_repo }}'
      gpgkey: '{{ consul_rpm_key }}'
      state: present
