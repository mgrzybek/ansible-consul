---

#- fail: msg="Bad DNS port number"
#  when:
#    - consul_dns_port != None
#    - consul_dns_port | number == false

- set_fact:
    install_consul: false
    configure_telegraf: false

- name: Check consul
  stat: path={{ consul_install_prefix }}/consul get_checksum=no
  register: consul_bin_stats

- name: Check consul version
  register: consul_bin_version
  when:
    - consul_bin_stats.stat.exists
  shell: >
    "{{ consul_install_prefix }}"/consul --version \
    | awk -Fv '/^Consul/ {print $2}'

- name: ACL info
  run_once: true
  block:
    - name: Get existing consul uuid in config file (acl stuff)
      register: consul_json
      shell: >
        cat /etc/consul.json \
        | awk '/acl_master_token/ {gsub("\"","");gsub(",","");print $NF}'

    - when: consul_json.stdout_lines | length > 0
      set_fact:
        consul_uuid: "{{ consul_json.stdout }}"

    - when: consul_json.stdout_lines | length == 0
      set_fact:
        consul_uuid: "{{ 999999999999999999999 | random | string + (lookup('pipe', 'date +%s%N')) | to_uuid() }}"

- name: Encrypt info
  run_once: true
  block:
    - name: Get existing consul encrypt in config file (acl stuff)
      register: consul_json
      shell: >
        cat /etc/consul.json \
        | awk '/encrypt/ {gsub("\"","");gsub(",","");print $NF}'

    - when: consul_json.stdout_lines | length > 0
      set_fact:
        consul_encrypt: "{{ consul_json.stdout }}"

- name: Set facts (version to install = {{ consul_consul_version }}, install_consul = true)
  when:
    - consul_package_state == 'present'
    - consul_bin_version.stdout | default('') != consul_consul_version or not consul_bin_version is defined
    #- consul_consul_encrypt == None or consul_consul_encrypt | length == 0
  set_fact:
    version_to_install: "{{ consul_consul_version }}"
    install_consul: true

- when:
    - consul_consul_encrypt != None
  set_fact:
    consul_encrypt: "{{ consul_consul_encrypt }}"

- name: Last version
  when: consul_package_state == 'latest'
  block:
    - name: Get last online version
      run_once: true
      register: last_version
      until: last_version is success
      retries: 5
      delay: 10
      shell: >
        warn=False \
        curl \
            {% if consul_http_proxy is defined and consul_http_proxy | length > 0 %}-x {{ consul_http_proxy }}{% endif %} \
            -s https://releases.hashicorp.com/consul/ \
            | awk -F = '/consul_/ {gsub("\>.+$","");gsub("\"","");print $2}' \
            | grep {% if consul_consul_version_ent | lower == 'false' %}-v{% endif %} ent \
            | head -n 1|awk -F/ '{print $3}'

    - fail: msg="Cannot get last version"
      when: last_version.stdout == ""

    - name: version to install = {{ last_version.stdout }}, install_consul = true
      when: consul_bin_version.stdout | default('') != last_version.stdout or not consul_bin_version is defined
      set_fact:
        version_to_install: "{{ last_version.stdout }}"
        install_consul: true

- name: Check telegraf
  register: telegraf_service
  shell: systemctl is-active telegraf 2>/dev/null || echo ko && exit 0

- when:
    - telegraf_service.stdout.find('active') > -1
    - consul_config_telegraf | lower == 'true' 
  set_fact:
    configure_telegraf: true
